# -*- coding: utf-8 -*-
"""Credit_card_fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g5BJGHlkyByuQLGZEfnNI32751qKw_W2

***import necessary libraries***
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec

data = pd.read_csv('/content/creditcard.csv')

data.head()

data.describe()

"""Analyzing The Data"""

fraud = data[data['Class'] == 1]
valid = data[data['Class'] == 0]

outlierFraction = len(fraud)/float(len(valid))
print(outlierFraction)
print('fraud cases : {}'.format(len(data[data['Class'] == 1])))
print('Valid cases : {}'.format(len(data[data['Class'] == 0])))

print('Amount details of the fraudulent transaction')
fraud.Amount.describe()

print('details of valid transaction')
valid.Amount.describe()

corrmat = data.corr()
fig = plt.figure(figsize=(12,9))
sns.heatmap(corrmat,vmax=.8,square=True)
plt.show

x = data.drop(['Class'], axis = 1)
y = data['Class']

print('x shape : ',x.shape)
print('y shape : ',y.shape )

x_data = x.values
y_data = y.values

from sklearn.model_selection import train_test_split

# Combine x_data and y_data to drop rows with NaN values together
data_combined = pd.DataFrame(x_data).copy()
data_combined['Class'] = y_data

# Drop rows with any NaN values
data_combined.dropna(inplace=True)

# Separate the features and target again
x_data_cleaned = data_combined.drop('Class', axis=1).values
y_data_cleaned = data_combined['Class'].values

# Split the cleaned data
x_train, x_test, y_train, y_test = train_test_split(x_data_cleaned, y_data_cleaned, test_size=0.2, random_state=42)

"""Logistic REgerssion"""

from sklearn.linear_model import LogisticRegression

lg = LogisticRegression()
lg.fit(x_train,y_train)

y_pred = lg.predict(x_test)

from sklearn.metrics import accuracy_score
x_train_prediction = lg.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)
print('Logistics Model')
print('Accuracy : ', training_data_accuracy)

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()
rfc.fit(x_train,y_train)
y_pred = rfc.predict(x_test)

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,matthews_corrcoef,confusion_matrix

accuracy = accuracy_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
f1_score =  f1_score(y_test,y_pred)
mcc =  matthews_corrcoef(y_test,y_pred)

print('Model Evaluation Metrics')
print('Logistics Model accuracy :', training_data_accuracy)
print('Random forest score : ', accuracy)
print('Precision score :', precision)
print('Recall score :',recall)
print('f1_score : ',f1_score)
print('MCC : ',mcc)

